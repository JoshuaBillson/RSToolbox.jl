var documenterSearchIndex = {"docs":
[{"location":"spectral_example/","page":"Spectral Analysis","title":"Spectral Analysis","text":"CurrentModule = RemoteSensingToolbox","category":"page"},{"location":"spectral_example/#Spectral-Analysis-Example","page":"Spectral Analysis","title":"Spectral Analysis Example","text":"","category":"section"},{"location":"spectral_example/","page":"Spectral Analysis","title":"Spectral Analysis","text":"A common application of remotely sensed imagery is land cover classification. One method to accomplish this is to analyze the spectral signatures produced by different types of cover. RemoteSensingToolbox provides a number of functions for extracting and visualyzing spectral signatures organized by their associated lan cover.","category":"page"},{"location":"spectral_example/","page":"Spectral Analysis","title":"Spectral Analysis","text":"The first step in our analysis is to load our remotely sensed data and convert the DNs (Digital Numbers) to reflectances. Reflectance is a standardized unit of measurement defined over the interval [0, 1] which denotes the fraction of light that is reflected by the observed surface. A reflectance of 0.0 indicates that no light was reflected whereas a reflectance of 1.0 indicates that 100% of light was reflected.","category":"page"},{"location":"spectral_example/","page":"Spectral Analysis","title":"Spectral Analysis","text":"using RemoteSensingToolbox, DataFrames, Shapefile\n\nlandsat = Landsat8(\"data/LC08_L2SP_043024_20200802_20200914_02_T1/\") |> dn_to_reflectance","category":"page"},{"location":"spectral_example/","page":"Spectral Analysis","title":"Spectral Analysis","text":"Next, we need to load a shapefile which defines regions of interest containing each type of land cover within our study area.","category":"page"},{"location":"spectral_example/","page":"Spectral Analysis","title":"Spectral Analysis","text":"shp = Shapefile.Table(\"data/landcover/landcover.shp\") |> DataFrame","category":"page"},{"location":"spectral_example/","page":"Spectral Analysis","title":"Spectral Analysis","text":"Examining the shapefile gives us some idea of how its contents are structured.","category":"page"},{"location":"spectral_example/","page":"Spectral Analysis","title":"Spectral Analysis","text":"3×3 DataFrame\n Row │ geometry           id     cover      \n     │ Polygon            Int64  String     \n─────┼──────────────────────────────────────\n   1 │ Polygon(5 Points)      1  hail scar\n   2 │ Polygon(6 Points)      2  water\n   3 │ Polygon(5 Points)      3  vegetation","category":"page"},{"location":"spectral_example/","page":"Spectral Analysis","title":"Spectral Analysis","text":"As we can see, the regions of interest are stored as Polygon objects under the :geometry column, while the land cover type is under :cover.","category":"page"},{"location":"spectral_example/","page":"Spectral Analysis","title":"Spectral Analysis","text":"We can call plot_signatures to extract and visualize the signatures of each type of cover specified in shp. This method expects the RasterStack or AbstractSensor from which we want to extract the signatures, a shapefile denoting the regions of interest, the column in the shapefile recording the land cover type, and a destination to which the plot will be saved.","category":"page"},{"location":"spectral_example/","page":"Spectral Analysis","title":"Spectral Analysis","text":"plot_signatures(landsat, shp, :cover, \"landsat_sigs.png\")","category":"page"},{"location":"spectral_example/","page":"Spectral Analysis","title":"Spectral Analysis","text":"(Image: )","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = RemoteSensingToolbox","category":"page"},{"location":"#RemoteSensingToolbox","page":"Home","title":"RemoteSensingToolbox","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for RemoteSensingToolbox.","category":"page"},{"location":"#Sensors","page":"Home","title":"Sensors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Sensors are julia structs that wrap a typical Rasters.RasterStack object to provide compatability with many RemoteSensingToolbox algorithms and methods.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The following methods are supported by all AbstractSensor types:","category":"page"},{"location":"","page":"Home","title":"Home","text":" \nBase.getindex return the layer correspinding to the given band name.\nBase.length return the number of layers in the enclosed Rasters.RasterStack.\nBase.map apply a function to each layer in the enclosed Rasters.RasterStack.\nBase.write write layers to file.\nRasters.resample resample data to a different size and projection, or snap to another object.\nRasters.crop shrink objects to specific dimension sizes or the extent of another object.\nRasters.extend extend objects to specific dimension sizes or the extent of another object.\nRasters.trim trims areas of missing values for arrays and across stack layers.\nRasters.mask mask an object by a polygon or Raster along X/Y, or other dimensions.\nRasters.replace_missing replace all missing values in an object and update missingval.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Additionally, asraster can be used to apply a function to the enclosed Rasters.RasterStack.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [RemoteSensingToolbox.Sensors]","category":"page"},{"location":"#RemoteSensingToolbox.Sensors.AbstractSensor","page":"Home","title":"RemoteSensingToolbox.Sensors.AbstractSensor","text":"The supertype of all sensor types. \n\nSubtypes should wrap a RasterStack under the field 'stack' and implement the following interface:\n\nblue(X::Sensor)\n\ngreen(X::Sensor)\n\nred(X::Sensor) \n\nnir(X::Sensor) \n\nswir1(X::Sensor)\n\nswir2(X::Sensor)\n\ndn2rs(::Type{<:AbstractSensor})\n\nBandSet(::Type{Landsat8})\n\nExample Implementation\n\nstruct Landsat8 <: AbstractSensor\n    stack::RasterStack\nend\n\nfunction BandSet(::Type{Landsat8})\n    bands = [:B1, :B2, :B3, :B4, :B5, :B6, :B7]\n    wavelengths = [440, 480, 560, 655, 865, 1610, 2200]\n    return BandSet(bands, wavelengths)\nend\n    \nblue(X::Landsat8) = X[:B2]\n\ngreen(X::Landsat8) = X[:B3]\n\nred(X::Landsat8) = X[:B4]\n\nnir(X::Landsat8) = X[:B5]\n\nswir1(X::Landsat8) = X[:B6]\n\nswir2(X::Landsat8) = X[:B7]\n\ndn2rs(::Type{Landsat8}) = (scale=0.0000275, offset=-0.2)\n\n\n\n\n\n","category":"type"},{"location":"#RemoteSensingToolbox.Sensors.BandSet","page":"Home","title":"RemoteSensingToolbox.Sensors.BandSet","text":"A struct for storing the band names and associated wavelengths of a particular sensor.\n\nIt is expected that instances of AbstractSensor implement a BandSet constructor.\n\nThe central wavelength for a given band can be recovered by calling the BandSet.\n\nExample\n\njulia> bandset = BandSet(Sentinel2A);\njulia> bandset(:B8A)\n842.0\n\n\n\n\n\n","category":"type"},{"location":"#RemoteSensingToolbox.Sensors.DESIS","page":"Home","title":"RemoteSensingToolbox.Sensors.DESIS","text":"stack::Rasters.RasterStack\n\nImplements the AbstractSensor interface for DESIS.\n\n\n\n\n\n","category":"type"},{"location":"#RemoteSensingToolbox.Sensors.Landsat7","page":"Home","title":"RemoteSensingToolbox.Sensors.Landsat7","text":"stack::Rasters.RasterStack\n\nImplements the AbstractSensor interface for Landsat 7.\n\n\n\n\n\n","category":"type"},{"location":"#RemoteSensingToolbox.Sensors.Landsat8","page":"Home","title":"RemoteSensingToolbox.Sensors.Landsat8","text":"stack::Rasters.RasterStack\n\nImplements the AbstractSensor interface for Landsat 8.\n\n\n\n\n\n","category":"type"},{"location":"#RemoteSensingToolbox.Sensors.Sentinel2A","page":"Home","title":"RemoteSensingToolbox.Sensors.Sentinel2A","text":"stack::Rasters.RasterStack\n\nImplements the AbstractSensor interface for Sentinel-2A.\n\n\n\n\n\n","category":"type"},{"location":"#RemoteSensingToolbox.Sensors.asraster-Union{Tuple{T}, Tuple{Any, T}} where T<:AbstractSensor","page":"Home","title":"RemoteSensingToolbox.Sensors.asraster","text":"asraster(f, X::AbstractSensor)\n\nOperate on the AbstractSensor as if it was a regular Rasters.RasterStack.\n\nExample\n\nlandsat = Landsat8(\"LC08_L2SP_043024_20200802_20200914_02_T1/\")\nasraster(landsat) do stack\n    map(x -> x .* 0.0001f0, stack)\nend\n\n\n\n\n\n","category":"method"},{"location":"#RemoteSensingToolbox.Sensors.blue-Tuple{AbstractSensor}","page":"Home","title":"RemoteSensingToolbox.Sensors.blue","text":"blue(X::AbstractSensor)\n\nReturn the blue band for the given sensor.\n\n\n\n\n\n","category":"method"},{"location":"#RemoteSensingToolbox.Sensors.dn2rs-Union{Tuple{Type{T}}, Tuple{T}} where T<:AbstractSensor","page":"Home","title":"RemoteSensingToolbox.Sensors.dn2rs","text":"dn2rs(::Type{<:AbstractSensor})\n\nReturn the scale and offset required to convert DN to reflectance for the given sensor type.\n\nExample\n\njulia> dn2rs(Landsat8)\n(scale = 2.75e-5, offset = -0.2)\n\n\n\n\n\n","category":"method"},{"location":"#RemoteSensingToolbox.Sensors.dn_to_reflectance-Tuple{T} where T<:AbstractSensor","page":"Home","title":"RemoteSensingToolbox.Sensors.dn_to_reflectance","text":"dn_to_reflectance(X::AbstractSensor)\n\nTransform the raster from Digital Numbers (DN) to reflectance.\n\n\n\n\n\n","category":"method"},{"location":"#RemoteSensingToolbox.Sensors.green-Tuple{AbstractSensor}","page":"Home","title":"RemoteSensingToolbox.Sensors.green","text":"green(X::AbstractSensor)\n\nReturn the green band for the given sensor.\n\n\n\n\n\n","category":"method"},{"location":"#RemoteSensingToolbox.Sensors.nir-Tuple{AbstractSensor}","page":"Home","title":"RemoteSensingToolbox.Sensors.nir","text":"nir(X::AbstractSensor)\n\nReturn the nir band for the given sensor.\n\n\n\n\n\n","category":"method"},{"location":"#RemoteSensingToolbox.Sensors.red-Tuple{AbstractSensor}","page":"Home","title":"RemoteSensingToolbox.Sensors.red","text":"red(X::AbstractSensor)\n\nReturn the red band for the given sensor.\n\n\n\n\n\n","category":"method"},{"location":"#RemoteSensingToolbox.Sensors.swir1-Tuple{AbstractSensor}","page":"Home","title":"RemoteSensingToolbox.Sensors.swir1","text":"swir1(X::AbstractSensor)\n\nReturn the swir1 band for the given sensor.\n\n\n\n\n\n","category":"method"},{"location":"#RemoteSensingToolbox.Sensors.swir2-Tuple{AbstractSensor}","page":"Home","title":"RemoteSensingToolbox.Sensors.swir2","text":"swir2(X::AbstractSensor)\n\nReturn the swir2 band for the given sensor.\n\n\n\n\n\n","category":"method"},{"location":"#Visualization","page":"Home","title":"Visualization","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [RemoteSensingToolbox]\nPages = [\"visualization.jl\"]","category":"page"},{"location":"#RemoteSensingToolbox.Agriculture","page":"Home","title":"RemoteSensingToolbox.Agriculture","text":"Agriculture band composite.\n\n\n\n\n\n","category":"type"},{"location":"#RemoteSensingToolbox.ColorInfrared","page":"Home","title":"RemoteSensingToolbox.ColorInfrared","text":"Color infrared band composite.\n\n\n\n\n\n","category":"type"},{"location":"#RemoteSensingToolbox.Geology","page":"Home","title":"RemoteSensingToolbox.Geology","text":"Geology band composite.\n\n\n\n\n\n","category":"type"},{"location":"#RemoteSensingToolbox.SWIR","page":"Home","title":"RemoteSensingToolbox.SWIR","text":"SWIR band composite.\n\n\n\n\n\n","category":"type"},{"location":"#RemoteSensingToolbox.TrueColor","page":"Home","title":"RemoteSensingToolbox.TrueColor","text":"True color band composite.\n\n\n\n\n\n","category":"type"},{"location":"#RemoteSensingToolbox.visualize-Tuple{Rasters.AbstractRaster, Rasters.AbstractRaster, Rasters.AbstractRaster}","page":"Home","title":"RemoteSensingToolbox.visualize","text":"visualize(r::AbstractRaster, g::AbstractRaster, b::AbstractRaster; lower=0.02, upper=0.98)\nvisualize(g::AbstractRaster; lower=0.02, upper=0.98)\nvisualize(img::AbstractSensor, ::Type{TrueColor}; lower=0.02, upper=0.98)\nvisualize(img::AbstractSensor, ::Type{ColorInfrared}; lower=0.02, upper=0.98)\nvisualize(img::AbstractSensor, ::Type{SWIR}; lower=0.02, upper=0.98)\nvisualize(img::AbstractSensor, ::Type{Agriculture}; lower=0.02, upper=0.98)\nvisualize(img::AbstractSensor, ::Type{Geology}; lower=0.02, upper=0.98)\n\nVisualize a remotely sensed image by applying a histogram stretch. Returns either an RGB or grayscale image compatible with the Images.jl ecosystem.\n\nA number of band combinations are supported for types implementing the AbstractSensor interface.\n\nExample 1\n\nlandsat = Landsat8(\"LC08_L2SP_043024_20200802_20200914_02_T1/\")\nimg = visualize(red(landsat), green(landsat), blue(landsat))\nsave(\"truecolor.png\", img)\n\nExample 2\n\nlandsat = Landsat8(\"LC08_L2SP_043024_20200802_20200914_02_T1/\")\nimg = visualize(landsat, TrueColor)\nsave(\"truecolor.png\", img)\n\n\n\n\n\n","category":"method"},{"location":"#Land-Cover-Indices","page":"Home","title":"Land Cover Indices","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [RemoteSensingToolbox.Algorithms]\nPages = [\"Algorithms/indices.jl\"]","category":"page"},{"location":"#RemoteSensingToolbox.Algorithms.mndwi-Tuple{Rasters.AbstractRaster, Rasters.AbstractRaster}","page":"Home","title":"RemoteSensingToolbox.Algorithms.mndwi","text":"mndwi(green::AbstractRaster, swir::AbstractRaster)\nmndwi(sensor::AbstractSensor)\n\nCompute the Modified Normalised Difference Water Index (Xu 2006).\n\nMNDWI = (green - swir) / (green + swir)\n\n\n\n\n\n","category":"method"},{"location":"#RemoteSensingToolbox.Algorithms.nbri-Tuple{Rasters.AbstractRaster, Rasters.AbstractRaster}","page":"Home","title":"RemoteSensingToolbox.Algorithms.nbri","text":"nbri(nir::AbstractRaster, swir2::AbstractRaster)\nnbri(sensor::AbstractSensor)\n\nCompute the Normalized Burn Ratio Index.\n\nNBRI is used to emphasize burned areas.\n\nNBRI = (nir - swir2) / (nir + swir2)\n\n\n\n\n\n","category":"method"},{"location":"#RemoteSensingToolbox.Algorithms.ndbi-Tuple{Rasters.AbstractRaster, Rasters.AbstractRaster}","page":"Home","title":"RemoteSensingToolbox.Algorithms.ndbi","text":"ndbi(swir1::AbstractRaster, nir::AbstractRaster)\nndbi(sensor::AbstractSensor)\n\nCompute the The Normalized Difference Built-up Index\n\nNDBI is used to emphasize urban and built-up areas.\n\nNDBI = (swir1 - nir) / (swir1 + nir)\n\n\n\n\n\n","category":"method"},{"location":"#RemoteSensingToolbox.Algorithms.ndmi-Tuple{Rasters.AbstractRaster, Rasters.AbstractRaster}","page":"Home","title":"RemoteSensingToolbox.Algorithms.ndmi","text":"ndmi(nir::AbstractRaster, swir1::AbstractRaster)\nndmi(sensor::AbstractSensor)\n\nCompute the Normalized Difference Moisture Index.\n\nNDMI is sensitive to the moisture levels in vegetation. It is used to monitor droughts and fuel levels in fire-prone areas.\n\nNDMI = (nir - swir1) / (nir + swir1)\n\n\n\n\n\n","category":"method"},{"location":"#RemoteSensingToolbox.Algorithms.ndvi-Tuple{Rasters.AbstractRaster, Rasters.AbstractRaster}","page":"Home","title":"RemoteSensingToolbox.Algorithms.ndvi","text":"ndvi(nir::AbstractRaster, red::AbstractRaster)\nndvi(sensor::AbstractSensor)\n\nCompute the Normalized Difference Vegetation Index.\n\nNDVI = (nir - red) / (nir + red)\n\n\n\n\n\n","category":"method"},{"location":"#RemoteSensingToolbox.Algorithms.ndwi-Tuple{Rasters.AbstractRaster, Rasters.AbstractRaster}","page":"Home","title":"RemoteSensingToolbox.Algorithms.ndwi","text":"ndwi(green::AbstractRaster, nir::AbstractRaster)\nndwi(sensor::AbstractSensor)\n\nCompute the Normalized Difference Water Index (McFeeters 1996).\n\nNDWI = (green - nir) / (green + nir)\n\n\n\n\n\n","category":"method"},{"location":"#RemoteSensingToolbox.Algorithms.savi-Tuple{Rasters.AbstractRaster, Rasters.AbstractRaster}","page":"Home","title":"RemoteSensingToolbox.Algorithms.savi","text":"savi(nir::AbstractRaster, red::AbstractRaster; L=0.33)\nsavi(sensor::AbstractSensor; L=0.33)\n\nCompute the Soil Adjusted Vegetation Index (Huete 1988).\n\nSAVI is a vegetation index which attempts to minimize soil brightness influences by introducing a soil-brightness correction factor (L).\n\nL represents the amount of green vegetation cover, which is set to 0.33 by default.\n\nSAVI = ((nir - red) / (nir + red + L)) * (1 + L)\n\n\n\n\n\n","category":"method"},{"location":"#Spectral-Analysis","page":"Home","title":"Spectral Analysis","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [RemoteSensingToolbox.Spectral]","category":"page"},{"location":"#RemoteSensingToolbox.Spectral.extract_signatures-Tuple{Rasters.RasterStack, DataFrames.DataFrame, Symbol}","page":"Home","title":"RemoteSensingToolbox.Spectral.extract_signatures","text":"extract_signatures(rs::AbstractSensor, shp::DataFrame, label::Symbol)\nextract_signatures(rs::RasterStack, shp::DataFrame, label::Symbol)\n\nExtract signatures from the given RasterStack or AbstractSensor within regions specified by a given shapefile.\n\nParameters\n\nrs: The RasterStack or AbstractSensor from which to extract spectral signatures.\nshp: A shapefile stored as a DataFrame with a :geometry column storing a GeoInterface.jl compatible geometry and a label column indicating the land cover type.\nlabel: The column in shp in which the land cover class is stored.\n\nReturns\n\nA DataFrame consisting of rows for each extracted signature and columns storing the respective bands and land cover type.\n\nExample\n\njulia> landsat = Landsat8(\"data/LC08_L2SP_043024_20200802_20200914_02_T1/\") |> dn_to_reflectance;\n\njulia> shp = Shapefile.Table(\"data/landcover/landcover.shp\") |> DataFrame;\n\njulia> extract_signatures(landsat, shp, :cover)\n3195×8 DataFrame\n  Row │ B1          B2         B3         B4         B5        B6         B7         label      \n      │ Float32     Float32    Float32    Float32    Float32   Float32    Float32    String     \n──────┼─────────────────────────────────────────────────────────────────────────────────────────\n    1 │  0.05102    0.0891075  0.156317   0.198558   0.482055  0.267197   0.139103   hail scar\n    2 │  0.054815   0.09238    0.16333    0.207742   0.481203  0.270415   0.140973   hail scar\n    3 │  0.0561625  0.0942225  0.16564    0.208787   0.477875  0.273082   0.14353    hail scar\n    4 │  0.057015   0.0941125  0.16146    0.20425    0.47991   0.271267   0.141715   hail scar\n    5 │  0.044695   0.0839375  0.152852   0.193525   0.465198  0.258012   0.133217   hail scar\n  ⋮   │     ⋮           ⋮          ⋮          ⋮         ⋮          ⋮          ⋮          ⋮\n 3192 │ -0.0024675  0.011475   0.0757425  0.0416975  0.540658  0.0856975  0.035785   vegetation\n 3193 │ -0.001945   0.0115575  0.0766225  0.0419725  0.535488  0.08567    0.036005   vegetation\n 3194 │ -0.0023025  0.012135   0.0773925  0.0427975  0.523745  0.08556    0.0364175  vegetation\n 3195 │ -0.0019725  0.0119425  0.0767875  0.04211    0.523745  0.085065   0.0360325  vegetation\n                                                                               3186 rows omitted\n\n\n\n\n\n","category":"method"},{"location":"#RemoteSensingToolbox.Spectral.plot_signatures-Tuple{Rasters.RasterStack, DataFrames.DataFrame, BandSet, Symbol, String}","page":"Home","title":"RemoteSensingToolbox.Spectral.plot_signatures","text":"plot_signatures(rs::AbstractSensor, shp::DataFrame, label::Symbol, dst::String)\nplot_signatures(rs::RasterStack, shp::DataFrame, bandset::BandSet, label::Symbol, dst::String)\n\nPlot spectral signatures for each land cover type specified in a given shapefile.\n\nParameters\n\nrs: The RasterStack or AbstractSensor from which to extract spectral signatures.\nshp: A shapefile stored as a DataFrame with a :geometry column storing a GeoInterface.jl compatible geometry and a label column indicating the land cover type.\nbandset: The BandSet for the provided sensor specifying the available bands and associated wavelengths in nm. Inferred for AbstractSensor.\nlabel: The column in shp in which the land cover class is stored.\ndst: The destination at which to save the plot. Supports all file extensions supported by CairoMakie.\n\nExample\n\n# Read Landsat And Convert DNs To Reflectance\nlandsat = Landsat8(\"data/LC08_L2SP_043024_20200802_20200914_02_T1/\") |> dn_to_reflectance\n\n# Load Shapefile\nshp = Shapefile.Table(\"data/landcover/landcover.shp\") |> DataFrame\n\n# Plot Signatures\nplot_signatures(landsat, shp, :cover, \"landsat_sigs.png\")\n\n\n\n\n\n","category":"method"},{"location":"visualization_example/","page":"Visualization","title":"Visualization","text":"CurrentModule = RemoteSensingToolbox","category":"page"},{"location":"visualization_example/#Visualization-Example","page":"Visualization","title":"Visualization Example","text":"","category":"section"},{"location":"visualization_example/","page":"Visualization","title":"Visualization","text":"RemoteSensingToolbox provides a number of utilities for visualizing remote sensing imagery. First, lets load the imagery we want to visualize. We're working with Landsat 8 imagery, so we'll use the Landsat8 constructor to wrap our rasters in the appropriate context. Landsat8 is an instance of AbstractSensor, which allow many methods within RemoteSensingToolbox to infer sensor-specific information by exploiting Julia's multiple dispatch system. The Landsat8 constructor expects a directory storing Landsat 8 raster files with names conforming to the standard specification. If this is not the case, you may construct a Rasters.RasterStack manually and pass it to the constructor instead.","category":"page"},{"location":"visualization_example/","page":"Visualization","title":"Visualization","text":"using RemoteSensingToolbox, Images, Rasters\n\nlandsat = Landsat8(\"data/LC08_L2SP_043024_20200802_20200914_02_T1/\")","category":"page"},{"location":"visualization_example/","page":"Visualization","title":"Visualization","text":"Now let's visualize our data to see what we're working with. This is where the power of AbstractSensor can first be demonstrated. To view a true color composite of the data, we need to know the bands corresponding to red, green, and blue. However, it would be tedious to memorize and manually specify this information whenever we want to call a method which relies on a specific combination of bands. Fortunately, all AbstractSensor subtypes know this information implicitly, so all we need to do is pass TrueColor into the visualize method to automatically extract the appropriate bands.","category":"page"},{"location":"visualization_example/","page":"Visualization","title":"Visualization","text":"visualize(landsat, TrueColor; upper=0.90)","category":"page"},{"location":"visualization_example/","page":"Visualization","title":"Visualization","text":"(Image: )","category":"page"},{"location":"visualization_example/","page":"Visualization","title":"Visualization","text":"You may have noticed that we also provided an additional argument upper to the visualize method. This parameter controls the upper quantile to be used when performing histogram stretching to make the imagery more interpretable to humans. This parameter is set to 0.98 by default, but because our scene contains bright clouds, we need to lower this threshold to prevent the image from appearing too dark. Let's try again with another band combination. The Agriculture band comination is commonly used to distinguish regions with healthy vegetation, which appear as various shades of green.","category":"page"},{"location":"visualization_example/","page":"Visualization","title":"Visualization","text":"visualize(landsat, Agriculture; upper=0.90)","category":"page"},{"location":"visualization_example/","page":"Visualization","title":"Visualization","text":"(Image: )","category":"page"},{"location":"visualization_example/","page":"Visualization","title":"Visualization","text":"We can also view a mosaic of all the bands in our image by calling Images.mosaicview.","category":"page"},{"location":"visualization_example/","page":"Visualization","title":"Visualization","text":"mosaicview(landsat; upper=0.90, rowmajor=true, ncol=4)","category":"page"},{"location":"visualization_example/","page":"Visualization","title":"Visualization","text":"(Image: )","category":"page"},{"location":"visualization_example/","page":"Visualization","title":"Visualization","text":"We'll finish this example by demonstrating how easy it is to compute land cover indices with any AbstractSensor subtype. The Modified Normalized Difference Water Index (MNDWI) is an especially popular index, which is used to help distinguish water from land. Here, we visualize both the true color representation and the corresponding MNDWI index.","category":"page"},{"location":"visualization_example/","page":"Visualization","title":"Visualization","text":"# AbstractSensors are compatible with all view and index operations supported by Rasters.jl \npatch = @view landsat[X(5800:6800), Y(2200:3200)]\n\n# Visualize a true color representation next to the calculated MNDWI\ntrue_color = visualize(patch, TrueColor; upper=0.998)\nindex = visualize(mndwi(patch))\nmosaicview(true_color, index; npad=5, fillvalue=0.0, ncol=2)","category":"page"},{"location":"visualization_example/","page":"Visualization","title":"Visualization","text":"(Image: )","category":"page"}]
}
